[{"title":"拿来即用：Android App签名校验和Dex文件校验","date":"2017-02-12T00:24:37.000Z","path":"2017/02/12/拿来即用：Android-App签名校验和Dex文件校验/","text":"应用签名校验 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141/** * Create By HaoRui */public class SignCheck &#123; private Context context; private String cer = null; private String realCer = null; private static final String TAG = \"SignCheck\"; public SignCheck(Context context) &#123; this.context = context; this.cer = getCertificateSHA1Fingerprint(); &#125; public SignCheck(Context context, String realCer) &#123; this.context = context; this.realCer = realCer; this.cer = getCertificateSHA1Fingerprint(); &#125;&lt;!-- more --&gt; public String getRealCer() &#123; return realCer; &#125; /** * 设置正确的签名 * * @param realCer */ public void setRealCer(String realCer) &#123; this.realCer = realCer; &#125; /** * 获取应用的签名 * * @return */ public String getCertificateSHA1Fingerprint() &#123; //获取包管理器 PackageManager pm = context.getPackageManager(); //获取当前要获取 SHA1 值的包名，也可以用其他的包名，但需要注意， //在用其他包名的前提是，此方法传递的参数 Context 应该是对应包的上下文。 String packageName = context.getPackageName(); //返回包括在包中的签名信息 int flags = PackageManager.GET_SIGNATURES; PackageInfo packageInfo = null; try &#123; //获得包的所有内容信息类 packageInfo = pm.getPackageInfo(packageName, flags); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); &#125; //签名信息 Signature[] signatures = packageInfo.signatures; byte[] cert = signatures[0].toByteArray(); //将签名转换为字节数组流 InputStream input = new ByteArrayInputStream(cert); //证书工厂类，这个类实现了出厂合格证算法的功能 CertificateFactory cf = null; try &#123; cf = CertificateFactory.getInstance(\"X509\"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //X509 证书，X.509 是一种非常通用的证书格式 X509Certificate c = null; try &#123; c = (X509Certificate) cf.generateCertificate(input); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; String hexString = null; try &#123; //加密算法的类，这里的参数可以使 MD4,MD5 等加密算法 MessageDigest md = MessageDigest.getInstance(\"SHA1\"); //获得公钥 byte[] publicKey = md.digest(c.getEncoded()); //字节到十六进制的格式转换 hexString = byte2HexFormatted(publicKey); &#125; catch (NoSuchAlgorithmException e1) &#123; e1.printStackTrace(); &#125; catch (CertificateEncodingException e) &#123; e.printStackTrace(); &#125; return hexString; &#125; //这里是将获取到得编码进行16 进制转换 private String byte2HexFormatted(byte[] arr) &#123; StringBuilder str = new StringBuilder(arr.length * 2); for (int i = 0; i &lt;arr.length; i++) &#123; String h = Integer.toHexString(arr[i]); int l =h.length(); if (l == 1) h = \"0\" + h; if (l &gt; 2) h = h.substring(l - 2, l); str.append(h.toUpperCase()); if (i &lt; (arr.length - 1)) str.append(':'); &#125; return str.toString(); &#125; /** * 检测签名是否正确 * @return true 签名正常 false 签名不正常 */ public boolean check() &#123; if (this.realCer != null) &#123; cer = cer.trim(); realCer = realCer.trim(); if (this.cer.equals(this.realCer)) &#123; return true; &#125; &#125;else &#123; Log.e(TAG, \"未给定真实的签名 SHA-1 值\"); &#125; return false; &#125;&#125; 使用方法： 首先使用 keytool 获取签名的 sha-1 值，命令为 keytool -list -v -keystore xxx.jks （将 xx.jks 换成你的应用签名所用文件， 这里会提示输入 keystore 的密码 ps：签名文件在eclipse 是 .keystore 文件， 在 Android Studio中就是 .jks 文件）） 然后使用如下代码校验签名： 1234567SignCheck signCheck = new SignCheck(this,\"27:19:6E:38:6B:87:5E:76:AD:F7:00:E7:EA:84:E4:C6:EE:E3:3D:FA\"); if(signCheck.check()) &#123; //TODO 签名正常 &#125;else &#123; //TODO 签名不正确 newAlertDialog.Builder(this).setMessage(\"请前往官方渠道下载正版 app， http://.....\").setPositiveButton(\"确定\",null).show(); &#125; Dex文件校验123456789101112131415161718private boolean checkcrc()&#123; boolean checkResult = false; long crc = Long.parseLong(getString(R.string.crc));//获取字符资源中预埋的crc值 ZipFile zf; try&#123; String path = getApplicationContext().getPackageCodePath();//获取apk安装路径 zf = new ZipFile(path);//将apk封装成zip对象 ZipEntry ze = zf.getEntry(\"classes.dex\");//获取apk中的classes.dex long CurrentCRC = ze.getCrc();//计算当前应用classes.dex的crc值 if(CurrentCRC != crc)&#123;//crc值对比 checkResult = true; &#125; &#125;catch(IOException e)&#123; handleError(); checkResult = false; &#125; return checkResult;&#125;","tags":[{"name":"应用安全","slug":"应用安全","permalink":"http://yoursite.com/tags/应用安全/"}]},{"title":"Android开发小技巧速查整理","date":"2017-02-11T00:48:26.000Z","path":"2017/02/11/应用开发小技巧速查/","text":"Activity.startActivities() 常用于在应用程序中间启动其他的Activity。 TextUtils.isEmpty() 用于检测是否为空。 Html.fromHtml() 用于生成一个Html,参数可以是一个字符串 TextView.setError() 验证用户输入,输入错误时可以设置错误提示。 Build.VERSION_CODES 这个标明了当前的版本号,点进去可以看到各个版本的不同特性。 Log.getStackTraceString() 日志类工具 LayoutInflater.from() 用于Inflate一个layout,参数是layout的id ViewConfiguration.getScaledTouchSlop() 这个方法获取的值表示:用户的手滑动这个距离后,才判定为正在进行滑动. PhoneNumberUtils.convertKeypadLettersToDigits 将字母转换为数字,类似于T9输入法, Context.getCacheDir() 获取缓存数据文件夹的路径 argbEvaluator.evaluate(fraction,startValue,endValue); 一个在两种色彩中，通过偏移量计算出另一个色彩的类。 用于处理颜色的渐变 ContextThemeWrapper 运行的时候修改主题。 Space 用来分隔不同的控件，其中形成一个空白的区域。在初始化的时候会跳过Draw这个过程。 ValueAnimator.reverse() 顺畅的取消动画效果 DateUtils.formatDateTime() 用来进行区域格式化工作，输出格式化和本地化的时间或者日期。 TypedValue.applyDimension() 对sp dp 和 px 之间进行单位转换 AlarmManager.setInexactRepeating 设置非准确闹钟。 在一些指定的时间点启动我们的服务进行处理事件。 当使用setInexactRepeating()时，系统可以在同一时间触发多个应用的闹钟，从而有效的减少设备的唤醒次数。 Formatter.formatFileSize() 一个区域化的文件大小格式化工具。把大小转换为MB，G，KB之类的字符串。 ActionBar.hide() 隐藏和显示ActionBar Linkify.addLinks() 在Text上添加链接 StaticLayout 绘制文本的时候指定绘制区域的宽度 Activity.onBackPressed() 管理back键的方法,在Activity中重写该方法可以用来处理back键的事件 GestureDetector 用来监听手势事件，比如点击，长按，慢滑动，快滑动 DrawFilter 可以暂时修改所使用的画笔，可以禁用/启用抗锯齿,或改变画的颜色。 ActivityManager.getMemoryClass() 获取机器剩余内存 ViewStub 在程序运行过程中动态的根据当前条件来决定是否显示某个控件或布局 ViewStub对象是一个看不见的，零大小的视图，并在程序运行时根据需要进行动态加载。只有ViewStub对象被设置为可见，或是调用了ViewStub.inflate()方法时，ViewStub对象所指向的布局才会被实例化，并加载到指向的父布局中。 SystemClock.sleep() 忽略中断异常的sleep操作 DisplayMetrics.density 获取设备像素密度 Pair.create() 构建类和构造器的方法。 UrlQuerySanitizer 一个用来处理url链接的工具类,可以很方便的获取url中的query参数 Fragment.setArguments 在初始化Fragment时向Fragment传参的一个很方便的接口，在Fragment中使用getArguments()来接收。 DialogFragment.setShowsDialog () 用于在Activity的内容之上展示一个模态的对话框。 有着和Fragment基本一致的声明周期。 FragmentManager.enableDebugLogging () 在需要观察 Fragment 状态的时候会有帮助。 LocalBroadcastManager 只能用于应用内通信，安全性更好，同时拥有更高的运行效率。 PhoneNumberUtils.formatNumber () PhoneNumverUtils提供了一系列方法用来格式化电话号码 Application.registerActivityLifecycleCallback(callback) 给Activity设置生命周期回调，可以监听到Activity的Created、Destory和Paused等。 versionNameSuffix 在Gradle脚本中使用该标签可以修改在Manifest中定义的VersionName -nodp 把一些不能被拉伸的图片放在 drawable-nodpi 中，此图片将不会被放大，以原大小显示。 Activity.recreate() 强制一个Activity重新创建自己一个新实例的方法，调用该方法目标Activity会重新走一遍自己的生命周期 PackageManager.checkSignatures () 检查两个apk安装包的签名是否一样，一样的话返回值&gt;0否则返回值&lt;0 Activity.isChangingConfigurations () 通常在onStop()函数中通过该函数来判断当前的Activity是否正在改变Configuration，从而来决定该Activity中引用的一些资源该如何处理， SearchRecentSuggestionsProvider 通常用与写入历史和读取搜索记录 ViewTreeObserver 可以注册监听正在屏幕上显示的视图树中任何视图状态的变化，可以用来视图初始化完成后获取某个控件的尺寸。 DatabaseUtils 一个包含各种数据库操作的使用工具类。 android:weightSum (LinearLayout) 可以用来定义总的 weight 数量。 android:duplicateParentState (View) 和父组件保持同样的状态。 如果设置此属性，将直接从父容器中获取绘图状态（光标，按下等）。 需注意这两个属性只是传递点击状态而不会执行点击事件。 android:clipChildren (ViewGroup) 是否限制子View在其范围内 设置这个属性后子控件就可以在父控件的范围之外进行绘制了 android:fillViewport (ScrollView) 解决在 ScrollView 中当内容不足的时候填不满屏幕的问题。 android:tileMode (BitmapDrawable) 用来设置Bitmap显示方式，有平铺、重复等。 android:enterFadeDuration/android:exitFadeDuration (Drawables) 为selector设置渐变效果 android:scaleType (ImageView) 设置ImageView 中图片的显示方式 Merge 优化UI结构，删除多余层级。 当你使用include标签添加布局文件时，系统会忽略merge节点并且直接添加它的子节点。 AtomicFile 保证文件的写入完成，并在写入之后删除备份文件。原子性 ViewDragHelper 它定义了一组有用的操作和状态追踪，允许用户在父ViewGroup中拖动并且重新定位子View ThumbnailUtil 帮助创建缩略图，包括视频缩略图 Context.getExternalFilesDir() getCacheDir()：获取/data/data/application package/cache目录 getFilesDir()：获取/data/data/application package/files目录 Context.getExternalFilesDir()：获取 SDCard/Android/data/你的应用的包名/files/ 目录，一般放一些长时间保存的数据 Context.getExternalCacheDir()：获取SDCard/Android/data/你的应用包名/cache/目录，一般存放临时缓存数据 ​ SparseArray SparseArray是Android为类型的HashMap专门写的类，目的是为了提供效率，其核心算法是半分查找法。 比 HashMap 节省内存，大概节省 35%左右的内存。 PackageManager.setComponentEnabledSetting() 使用这个方法可以开启和禁用四大组件。比如关掉一个当前不用的广播接收器。 SQLiteDatabase.yieldIfContendedSafely() 暂时停止一个数据库事务 这个方法表示我现在执行我的多次数据库操作，如果碰到其他的数据库操作，我先让别的操作完 再执行我的操作。 Environment.getExternalStoragePublicDirectory() 获取外部存储卡的公共目录 View.generateViewId() 动态生成控件的ID。 ActivityManager.clearApplicationUserData() 一键清理你的app产生的用户数据 API 19以上可以通过反射调用，需要应用具有android.permission.CLEAR_APP_USER_DATA权限 Context.createConfigurationContext() 自定义你的配置环境信息。 ActivityOptions 方便的定义两个Activity切换的动画。 ViewParent.requestDisallowInterceptTouchEvent() 使父控件不拦截当前的Touch事件 Fragment . setUserVisibleHint() 重写Fragment中的该方法，实现 fragment 对用户可见时才加载资源（延迟加载）。 该方法优先于oncreat()方法被调用 View.hasOverlappingRendering 告知系统当前View是否存在内容重叠的情况，帮助系统优化绘制流程。 原理：对于有重叠内容的View，系统简单粗暴的使用 offscreen buffer来协助处理。当告知系统该View无重叠内容时，系统会分别使用合适的alpha值绘制每一层。 AutoScrollHelper 用于控件边缘触发自动滚动。 实现场景:歌词自动滚动 TouchSlop 最小的滑动距离， VelocityTracker 速度跟踪,跟踪触摸屏事件的速率 AlphabetIndexer 字母索引辅助类,实现对链表类型的数据进行快速索引。 ArrayMap 内部由两个数组维护的Array。 比 HashMap 更高的内存效率，但比 HashMap 慢，不适合有大量数据的场景。 ArrayMap相对于SparseArray，特点就是key值类型不受限 采用二分法查找 参考：Android Tips Round-Up 知乎问题：Android开发中，有哪些让你觉得相见恨晚的方法、类或接口？ #推荐阅读：awesome-android-tips 项目","tags":[{"name":"Tips","slug":"Tips","permalink":"http://yoursite.com/tags/Tips/"}]},{"title":"Hello World","date":"2016-05-11T10:30:37.000Z","path":"2016/05/11/hello-world/","text":"迷雾之中，顾自前行。","tags":[]}]